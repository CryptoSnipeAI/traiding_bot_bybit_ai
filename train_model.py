import os
import joblib
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score
from features import prepare_features
from data_fetch import get_klines
from get_pairs import get_top_pairs

def main():
    symbols = get_top_pairs()
    all_features = []
    all_targets = []

    for symbol in symbols:
        print(f"üìà –û–±—Ä–∞–±–æ—Ç–∫–∞: {symbol}")
        try:
            df = get_klines(symbol)
            result = prepare_features(df)

            # –µ—Å–ª–∏ prepare_features –≤–µ—Ä–Ω—É–ª None
            if result is None:
                print(f"‚ö†Ô∏è {symbol}: —Ñ–∏—á–∏ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã")
                continue

            df_feat, target = result

            if df_feat is None or df_feat.empty:
                print(f"‚ö†Ô∏è {symbol}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏")
                continue

            # –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            drop_cols = ['timestamp', 'open', 'high', 'low', 'turnover', 'future_max', 'return', 'target']
            X = df_feat.drop(columns=[col for col in drop_cols if col in df_feat.columns])
            y = target if isinstance(target, pd.Series) else df_feat['target']

            all_features.append(X)
            all_targets.append(y)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {symbol}: {e}")
            continue

    if not all_features:
        raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –í—Å–µ —Ç–∏–∫–µ—Ä—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä.")

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
    X_all = pd.concat(all_features)
    y_all = pd.concat(all_targets)

    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    X_train, X_test, y_train, y_test = train_test_split(X_all, y_all, test_size=0.2, random_state=42)

    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    print("üìä Accuracy:", round(acc, 4))
    print(classification_report(y_test, y_pred))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
    joblib.dump(model, "model.pkl")
    print("‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: model.pkl")

if __name__ == "__main__":
    main()
