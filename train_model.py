import pandas as pd
import joblib
import os
from data_fetch import get_klines
from features import prepare_features

# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
MODEL_PATH = "model.pkl"

# –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ top 20 –∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ)
tickers = [
    "BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT", "ADAUSDT", "DOGEUSDT",
    "AVAXUSDT", "DOTUSDT", "MATICUSDT", "LTCUSDT", "TRXUSDT", "LINKUSDT", "BCHUSDT",
    "XLMUSDT", "ATOMUSDT", "ETCUSDT", "FILUSDT", "ICPUSDT", "HBARUSDT"
]

all_X = []
all_y = []

for symbol in tickers:
    try:
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–∞—é {symbol}")
        df = get_klines(symbol=symbol, interval="15m", limit=300)
        df = prepare_features(df)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ
        expected_features = [
            'close', 'rsi', 'stoch_k', 'stoch_d', 'macd', 'macd_signal',
            'willr', 'cci', 'adx', 'obv', 'roc', 'atr', 'ema_9', 'ema_21',
            'ema_50', 'ema_200', 'tema', 'trix', 'mfi', 'vwap', 'supertrend_signal'
        ]

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        if df[expected_features].isnull().any().any():
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {symbol}: –µ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            continue

        X = df[expected_features]
        y = df["target"]  # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

        all_X.append(X)
        all_y.append(y)

        print(f"‚úÖ {symbol} –≥–æ—Ç–æ–≤")

    except Exception as e:
        print(f"‚ùå {symbol} –æ—à–∏–±–∫–∞: {e}")

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
if not all_X or not all_y:
    raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –í—Å–µ —Ç–∏–∫–µ—Ä—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä.")

X_all = pd.concat(all_X, ignore_index=True)
y_all = pd.concat(all_y, ignore_index=True)

print("üìä –û–±—ä—ë–º –¥–∞–Ω–Ω—ã—Ö:", X_all.shape)

# –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_all, y_all)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
joblib.dump(model, MODEL_PATH)
print(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ {MODEL_PATH}")
