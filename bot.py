import time
import requests
import pandas as pd
from ta.trend import EMAIndicator, MACD
from ta.momentum import RSIIndicator
from ta.volatility import AverageTrueRange
from telegram import Bot
import config
import traceback

bot = Bot(token=config.TELEGRAM_BOT_TOKEN)

def get_symbols():
    try:
        url = "https://api.bybit.com/contract/v3/public/instruments"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        instruments = data.get("result", {}).get("list", [])
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å quote_currency == "USDT"
        symbols = [item["symbol"] for item in instruments if item.get("quote_currency") == "USDT"]
        print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return symbols
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä: {e}")
        traceback.print_exc()
        return []

def get_klines(symbol):
    try:
        url = f"https://api.bybit.com/contract/v3/public/kline/list?symbol={symbol}&interval=15&limit=100"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        kline_list = data.get("result", {}).get("list", [])
        if not kline_list:
            print(f"–ù–µ—Ç —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
            return None
        df = pd.DataFrame(kline_list)
        # –ü—Ä–∏–≤–æ–¥–∏–º –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∫ float
        for col in ["open", "high", "low", "close", "volume"]:
            df[col] = df[col].astype(float)
        return df
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {e}")
        traceback.print_exc()
        return None

def analyze(df):
    try:
        df["rsi"] = RSIIndicator(df["close"]).rsi()
        macd = MACD(df["close"])
        df["macd"] = macd.macd()
        df["macd_signal"] = macd.macd_signal()
        df["ema_9"] = EMAIndicator(df["close"], window=9).ema_indicator()
        df["ema_21"] = EMAIndicator(df["close"], window=21).ema_indicator()
        df["ema_50"] = EMAIndicator(df["close"], window=50).ema_indicator()
        df["atr"] = AverageTrueRange(high=df["high"], low=df["low"], close=df["close"]).average_true_range()

        rsi = df["rsi"].iloc[-1]
        macd_val = df["macd"].iloc[-1]
        macd_signal = df["macd_signal"].iloc[-1]
        ema_9 = df["ema_9"].iloc[-1]
        ema_21 = df["ema_21"].iloc[-1]
        ema_50 = df["ema_50"].iloc[-1]
        atr = df["atr"].iloc[-1]
        avg_price = df["close"].iloc[-10:].mean()

        confidence = 0
        direction = None

        if atr > avg_price * 0.005:
            if rsi > 60:
                confidence += 20
                direction = "long"
            elif rsi < 40:
                confidence += 20
                direction = "short"

            if macd_val > macd_signal and direction == "long":
                confidence += 25
            elif macd_val < macd_signal and direction == "short":
                confidence += 25

            if ema_9 > ema_21 > ema_50 and direction == "long":
                confidence += 30
            elif ema_9 < ema_21 < ema_50 and direction == "short":
                confidence += 30

            if direction:
                confidence += min(25, (atr / avg_price) * 1000)

        return (direction, int(confidence)) if confidence >= config.CONFIDENCE_THRESHOLD else (None, int(confidence))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        traceback.print_exc()
        return None, 0

def send_signal(symbol, direction, confidence, price):
    try:
        msg = f"üìà –°–∏–≥–Ω–∞–ª –Ω–∞ {direction.upper()}\n–ü–∞—Ä–∞: {symbol}\n–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {price}\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}%"
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞: {msg}")
        bot.send_message(chat_id=config.TELEGRAM_CHAT_ID, text=msg)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        traceback.print_exc()

def main():
    last_report_time = time.time()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É.")

    try:
        bot.send_message(config.TELEGRAM_CHAT_ID, text="‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        traceback.print_exc()

    while True:
        try:
            print("–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
            symbols = get_symbols()
            if not symbols:
                print("–ù–µ—Ç –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –ø–æ–¥–æ–∂–¥–µ–º –º–∏–Ω—É—Ç—É.")
                time.sleep(60)
                continue

            best = None
            best_confidence = 0

            for symbol in symbols:
                print(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {symbol}")
                df = get_klines(symbol)
                if df is None or df.empty:
                    print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {symbol}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                direction, confidence = analyze(df)
                print(f"{symbol}: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ={direction}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={confidence}%")

                if direction and confidence >= config.CONFIDENCE_THRESHOLD:
                    price = df["close"].iloc[-1]
                    send_signal(symbol, direction, confidence, price)

                if confidence > best_confidence:
                    best = (symbol, direction, confidence)
                    best_confidence = confidence

            if best:
                print(f"–õ—É—á—à–∞—è –ø–∞—Ä–∞ –∑–∞ —Ü–∏–∫–ª: {best[0]} | –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {best[1]} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {best[2]}%")

            # –†–∞–∑ –≤ —á–∞—Å –ø–∏–Ω–≥—É–µ–º, —á—Ç–æ–±—ã Render –Ω–µ —É–±–∏–≤–∞–ª –∑–∞ –ø—Ä–æ—Å—Ç–æ–∏
            if time.time() - last_report_time > 3600:
                bot.send_message(config.TELEGRAM_CHAT_ID, text="‚åõÔ∏è –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
                last_report_time = time.time()

            print("–ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...\n")
            time.sleep(300)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            traceback.print_exc()
            time.sleep(60)

if __name__ == "__main__":
    main()
